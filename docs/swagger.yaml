definitions:
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  auth.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  role.CreateRolesRequest:
    properties:
      deskription:
        type: string
      name:
        type: string
    required:
    - deskription
    - name
    type: object
  role.UpdateRolesRequest:
    properties:
      deskription:
        type: string
      name:
        type: string
    required:
    - deskription
    - name
    type: object
  user.CreateUsersRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
      role_id:
        type: integer
    required:
    - email
    - name
    - password
    type: object
  user.UpdateUsersRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
      role_id:
        type: integer
    required:
    - email
    - name
    - password
    type: object
info:
  contact:
    email: useryesa9@gmail.com
    name: Developer Support
  description: "This API allows managing users and roles with authentication.\n\n\U0001F510
    **Authorization**\nTo access protected endpoints, click \"Authorize\" and enter
    your token in this format:\n`Bearer <your-token>` (with a space after Bearer).\n\n\U0001F464
    **Login as Admin**\nUse the `/login` endpoint to get a token. Here is the default
    admin credential:\n- **Email**: `admin@gmail.com`\n- **Password**: `admin@gmail.com`\n\nMake
    sure to copy the token from the login response and prepend it with `Bearer ` before
    pasting it into the Authorize box."
paths:
  /admin/roles:
    get:
      description: Get list of all roles (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: Roles fetched successfully
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to fetch roles
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all roles
      tags:
      - Admin - Roles
    post:
      consumes:
      - application/json
      description: Create a new role with given data (admin only)
      parameters:
      - description: Create Role Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/role.CreateRolesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Role created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request payload
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to create role
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new role
      tags:
      - Admin - Roles
  /admin/roles/{id}:
    delete:
      description: Delete a role by ID (admin only)
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role deleted successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Role not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to delete role
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a role
      tags:
      - Admin - Roles
    get:
      description: Get a specific role by its ID (admin only)
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role fetched successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Role not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get role by ID
      tags:
      - Admin - Roles
    put:
      consumes:
      - application/json
      description: Update a role by ID (admin only)
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Role Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/role.UpdateRolesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Role updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request payload
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Role not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to update role
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update a role
      tags:
      - Admin - Roles
  /admin/users:
    get:
      description: Retrieve a list of all registered users in the system.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - Admin - Users
    post:
      consumes:
      - application/json
      description: Create a new user account with the given details.
      parameters:
      - description: User payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.CreateUsersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - Admin - Users
  /admin/users/{id}:
    delete:
      description: Delete a specific user by their ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete user by ID
      tags:
      - Admin - Users
    get:
      description: Retrieve a specific user by their ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - Admin - Users
    put:
      consumes:
      - application/json
      description: Update an existing user's information based on user ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUsersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update user by ID
      tags:
      - Admin - Users
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: Login Request
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Login a user
      tags:
      - Auth
  /register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: Register Request
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - Auth
  /user/profile:
    get:
      description: Retrieve the profile information of the currently authenticated
        user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - User - Profile
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Endpoint to login and generate token
  name: Auth
- description: Endpoint for regular users to access their profile
  name: User - Profile
- description: Endpoint for admin in managing user data
  name: Admin - Users
- description: Endpoint for admin to manage roles
  name: Admin - Roles
